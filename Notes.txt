Chapter 2 - Variables, Constants & Comments
* Javascript Data Types
- Number: 1, 2, 3, 10, 3.14 
- String: 'Hello, World' 
- Boolean: true / false 
- Null: Explicity set a variable with no value 
- Undefined: For variables that have not yet been defined 
- Object: Complex data structure - Arrays, Dates, Literals etc 
- Symbol: Used with objects

* Strings
- Properties: length
- Function: toUpperCase(), toLowerCase(), indexOf()
            lastIndexOf(), slice(), splice(), substr(), replace()

* Numbers
- Operator: + - * /
- Order of operation - B I D M A S
- ++, --, +=, -=, *=, /=
- NaN - Not a Number

* Template Strings:
Use `${}`

* Arrays
- Properties: length
- Methods: join(), indexOf(), concat(), push(), pop(), shift(), unshift()

* Booleans & Comparisons
- Booleans: true, false
- Comparisons: ==, !=, >, <, >=, <=

* Loose and Strict Comparison
=== !==

* Type Conversion
- Number()
- String()
- falsy: (false) (null) (undefined) (0) (NaN) ('') ("")
- truthy: All except falsy value

===============================================================================

Chapter 3 - Control Flow
* For Loops
for (let index = 0; index < array.length; index++) {
    const element = array[index];
    
}

* While Loops
while (condition) {
    
}

* Do - While Loops
do {
    
} while (condition);

* If - Else If - Else statements
if (condition) {
    
} else if(condition) {
    
} else {
    
}

* logical operators 
- OR ||  
- AND &&
- NOT !

* Break and Continue
- The break statement "jumps out" of a loop.
- The continue statement "jumps over" one iteration in the loop.

* Switch statements
switch (key) {
    case value:
        
        break;

    default:
        break;
}

* Variables & Block Scope
- In JavaScript there are two types of scope:

+ Local scope
+ Global scope

- JavaScript has function scope: Each function creates a new scope.

- Scope determines the accessibility (visibility) of these variables.

- Variables defined inside a function are not accessible (visible) from outside the function.

===============================================================================


Chapter 4: Functions & Methods

* Function Declarations & Expression
- Function Declarations: 

function name([param[, param,[..., param]]]) {
   [statements]
}

+ name: The function name.
+ param: The name of an argument to be passed to the function. Maximum number of arguments varies in different engines.
+ statements: The statements which comprise the body of the function.

- Function Expression:

let(const) myFunction = function [name]([param1[, param2[, ..., paramN]]]) {
   statements
};

+ name: The function name. Can be omitted, in which case the function is anonymous. The name is only local to the function body.
+paramN: The name of an argument to be passed to the function.
+ statements: The statements which comprise the body of the function.

* Arguments & Parameters

const variable = function(param1, param2, ..., paranmN) {
    statements;
}
const variable = function(param1, param2, ..., paranmN) {
    return ....;
}

* Arrow function

const variable = (param1, param2, ..., paranmN) => {
    statements;
}

* Functions & Methods

- Methods: 
+ JavaScript methods are actions that can be performed on objects.
+ A JavaScript method is a property containing a function definition.
+ Accessing Object Methods: objectName.methodName()

- Functions:
+ A JavaScript function is a block of code designed to perform a particular task.
+ A JavaScript function is executed when "something" invokes it (calls it).
+ Function Invocation: The code inside the function will execute when "something" invokes (calls) the function:
    # When an event occurs (when a user clicks a button)
    # When it is invoked (called) from JavaScript code
    # Automatically (self invoked)

* Callback Function & forEach
- Callback Function: A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.

- forEach: The forEach() method executes a provided function once for each array element.

arr.forEach(callback(currentValue [, index [, array]])[, thisArg]);

+ callback: Function to execute on each element, taking three arguments:
+ currentValue: The current element being processed in the array.
+ index (Optional): The index of the current element being processed in the array.
+ array (Optional): The array forEach() was called upon.
+ thisArg (Optional): Value to use as this when executing callback.

===============================================================================
Chapter 5: Objects
* Object Literals
- JavaScript objects are containers for named values called properties or methods.
let variable = {
    key1: value1,
    key2: value2,
    ...
    keyN: valueN 
}

* Methods (Object)
let variable = {
    key1: value1,
    key2: value2,
    ...
    keyN: function(param1, param2, ...) {
        statements;
    }
}

* this keyword
- In an object method, this refers to the "owner" of the method.
- In the example on the top of this page, this refers to the person object.
- The person object is the owner of the fullName method.
- When used alone, the owner is the Global object, so this refers to the Global object.


* Math Object
- Math.random()
- Math.round()
- Math.floor()
- Math.ceil()
- Math.trunc()
etc

* Primitive & Reference Types
- Primitive Types
    + numbers
    + strings
    + Booleans
    + null 
    + undefined
    + symbols
=> stored on stack

- Reference Types: All types of objects
    + object literals
    + arrays
    + functions 
    + dates
    + all other objects
=> stored on heap

===============================================================================
Chapter 6: Document Object Model
* DOM Explained
- DOM
    + Created by the browser
    + 'document' object

* Query Selector
- querySelector(): The querySelector() method returns the first element that matches a specified CSS selector(s) in the document.
    + with class="example": document.querySelector(".example");

- querySelectorAll(): The querySelectorAll() method returns all elements in the document that matches a specified CSS selector(s), as a static NodeList object.
    + with class="example": document.querySelectorAll(".example");

- getElementById(): 
+ The getElementById() method returns the element that has the ID attribute with the specified value.
+ This method is one of the most common methods in the HTML DOM, and is used almost every time you want to manipulate, or get info from, an element on your document.
+ Returns null if no elements with the specified ID exists.
+ An ID should be unique within a page. However, if more than one element with the specified ID exists, the getElementById() method returns the first element in the source code.
    document.getElementById("demo");

- getElementsByClassName():
+ The getElementsByClassName() method returns a collection of all elements in the document with the specified class name, as a NodeList object.
+ The NodeList object represents a collection of nodes. The nodes can be accessed by index numbers. The index starts at 0.
+ Tip: You can use the length property of the NodeList object to determine the number of elements with a specified class name, then you can loop through all elements and extract the info you want.
    document.getElementsByClassName("example");

- getElementsByTagName():
+ The getElementsByTagName() method returns a collection of all elements in the document with the specified tag name, as a NodeList object.
+ The NodeList object represents a collection of nodes. The nodes can be accessed by index numbers. The index starts at 0.
+ Tip: The parametervalue "*" returns all elements in the document.
+ Tip: You can use the length property of the NodeList object to determine the number of elements with the specified tag name, then you can loop through all elements and extract the info you want.
    document.getElementsByTagName("LI");

- NodeList vs HTML Collection
+ The most simplest answer is that both a NodeList and HTMLCollection are collections of DOM nodes. The difference is that while a NodeList can contain any node type, the HTMLCollection is going to only to contain any node Element.
+ So what is the difference between a node element and a node type?
+ Nodes: in the DOM, everything is a node and every node is an object. The name node is used as a generic term, for everything.
+ Element: is one specific type of node. It can be a list item, a div, the body, the window, whatever, but its a specific type.
+ Now we can see what the difference between a nodeList is and what a node element is:
+ In the end, one is general and one is specific lists of nodes. It's important to know simply because you should know what you are returning and for more advanced JavaScript issues such as speed, in the case of static NodeLists vs Live NodeLists.

(https://www.w3schools.com/js/js_htmldom_nodelist.asp)

* Adding & Changing Page Content
- innerText:
+ The innerText property sets or returns the text content of the specified node, and all its descendants.
+ If you set the innerText property, any child nodes are removed and replaced by a single Text node containing the specified string.
+ Note: This property is similar to the textContent property, however there are some differences:
    # textContent returns the text content of all elements, while innerText returns the content of all elements, except for <script> and <style> elements.
    # innerText will not return the text of elements that are hidden with CSS (textContent will). 
+ Tip: To set or return the HTML content of an element, use the innerHTML property.

- innerHTML: The innerHTML property sets or returns the HTML content (inner HTML) of an element.

* Getting & Setting Attributes
- getAttribute(): The getAttribute() method returns the value of the attribute with the specified name, of an element.
    document.getElementsByTagName("H1")[0].getAttribute("class");


- setAttribute(): 
+ The setAttribute() method adds the specified attribute to an element, and gives it the specified value.
+ If the specified attribute already exists, only the value is set/changed.
+ Note: Although it is possible to add the style attribute with a value to an element with this method, it is recommended that you use properties of the Style object instead for inline styling, because this will not overwrite other CSS properties that may be specified in the style attribute:
    document.getElementsByTagName("H1")[0].setAttribute("class", "democlass");

* Changing CSS Styles
- Style
+ The style property returns a CSSStyleDeclaration object, which represents an element's style attribute.
+ The style property is used to get or set a specific style of an element using different CSS properties
    document.getElementById("myH1").style.color = "red";

* Adding and Removing class
- classList:
+ The classList property returns the class name(s) of an element, as a DOMTokenList object.
+ This property is useful to add, remove and toggle CSS classes on an element.
+ The classList property is read-only, however, you can modify it by using the add() and remove() methods.

- Method: 
+ add(class1, class2, ...)	
    # Adds one or more class names to an element.
    # If the specified class already exist, the class will not be added

+ contains(class)	
    # Returns a Boolean value, indicating whether an element has the specified class name.

+ item(index)	
    # Returns the class name with a specified index number from an element. Index starts at 0.
    # Returns null if the index is out of range

+ remove(class1, class2, ...)
    # Removes one or more class names from an element.

+ toggle(class, true|false)
	# Toggles between a class name for an element.
    #The first parameter removes the specified class from an element, and returns false. If the class does not exist, it is added to the element, and the return value is true.
    # The optional second parameter is a Boolean value that forces the class to be added or removed, regardless of whether or not it already existed. For example:
    # Remove a class: element.classList.toggle("classToRemove", false); 
    # Add a class: element.classList.toggle("classToAdd", true);

* Parents, Siblings & Children
- children property: 
+ The children property returns a collection of an element's child elements, as an HTMLCollection object.
+ The elements in the collection are sorted as they appear in the source code and can be accessed by index numbers. The index starts at 0.
+ Tip: 
    # You can use the length property of the HTMLCollection object to determine the number of child elements, then you can loop through all children and extract the info you want.
    # The difference between this property and childNodes, is that childNodes contain all nodes, including text nodes and comment nodes, while children only contain element nodes.

Ex: var c = document.body.children;

- nextSibling property:
+ The nextSibling property returns the node immediately following the specified node, in the same tree level.
+ The returned node is returned as a Node object.
+ The difference between this property and nextElementSibling, is that nextSibling returns the next sibling node as an element node, a text node or a comment node, while nextElementSibling returns the next sibling node as an element node (ignores text and comment nodes).
+ This property is read-only.
+ Tip: 
    # Use the previousSibling property to return the previous node of the specified node, in the same tree level.
    # Use the childNodes property to return any child node of a specified node.

Ex: var x = document.getElementById("item1").nextSibling.innerHTML;


- parentElement property:
+ The parentElement property returns the parent element of the specified element.
+ The difference between parentElement and parentNode, is that parentElement returns null if the parent node is not an element node
+ In most cases, it does not matter which property you use, however, parentNode is probably the most popular.
+ This property is read-only.

Ex: var x = document.getElementById("myLI").parentElement.nodeName;

* Event Basic
- addEventListener()
+ The addEventListener() method attaches an event handler to the specified element.
+ Tip: Use the removeEventListener() method to remove an event handler that has been attached with the addEventListener() method.
+ Tip: Use the document.addEventListener() method to attach an event handler to the document.

- target Event Property:
+ Get the element that triggered a specific event:
    # alert(event.target);

* Creating & Removing Element
- remove(): The ChildNode.remove() method removes the object from the tree it belongs to.
    # node.remove();

- createElement(): The createElement() method creates an Element Node with the specified name.
+ Tip: After the element is created, use the element.appendChild() or element.insertBefore() method to insert it to the document.
    # document.createElement(nodename)

- append() : The ParentNode.append() method inserts a set of Node objects or DOMString objects after the last child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.

- prepend(): The ParentNode.prepend() method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.

* Event Bubbling (and delegation)
- Event Bubbling: When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.

- Stop Bubbling: event.stopPropagation()

- Delegation: If we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them – we put a single handler on their common ancestor.

* More DOM Events
- copy, wheel, mousemove

===============================================================================
Chapter 7: Form & Form Events

* Form Events:
- Capture data or information from a user (username & password)

===============================================================================
Chapter 9: Array Methods
* Filter Method:
- The filter() method creates a new array with all elements that pass the test implemented by the provided function.
- array.filter(function(currentValue, index, arr), thisValue)
    + function(currentValue, index,arr): Required. A function to be run for each element in the array.
    Function arguments:
        # currentValue:	Required. The value of the current element
        # index:	    Optional. The array index of the current element
        # arr:      	Optional. The array object the current element belongs to

    + thisValue: Optional. A value to be passed to the function to be used as its "this" value.
        If this parameter is empty, the value "undefined" will be passed as its "this" value

    + Return Value:	An Array containing all the array elements that pass the test. If no elements pass the test it returns an empty array.

* Map Method:
- The map() method creates a new array with the results of calling a function for every array element.
- The map() method calls the provided function once for each element in an array, in order.
- Note: map() does not execute the function for array elements without values.
- Note: this method does not change the original array.

- array.map(function(currentValue, index, arr), thisValue)
    + function(currentValue, index,arr): Required. A function to be run for each element in the array.
    Function arguments:
        # currentValue:	Required. The value of the current element
        # index:	    Optional. The array index of the current element
        # arr:      	Optional. The array object the current element belongs to

    + thisValue: Optional. A value to be passed to the function to be used as its "this" value.
        If this parameter is empty, the value "undefined" will be passed as its "this" value

    + Return Value: An Array containing the results of calling the provided function for each element in the original array.

* Reduce Method: 
- The reduce() method reduces the array to a single value.
- The reduce() method executes a provided function for each value of the array (from left-to-right).
- The return value of the function is stored in an accumulator (result/total).
- Note: reduce() does not execute the function for array elements without values.
- Note: this method does not change the original array.

- array.reduce(function(total, currentValue, currentIndex, arr), initialValue)
    + function(total,currentValue, index,arr): Required. A function to be run for each element in the array.
    Function arguments:
        # total:	    Required. The initialValue, or the previously returned value of the function
        # currentValue:	Required. The value of the current element
        # currentIndex:	Optional. The array index of the current element
        # arr:	        Optional. The array object the current element belongs to
    + initialValue	: Optional. A value to be passed to the function as the initial value
    + Return Value: Returns the accumulated result from the last call of the callback function

* Find Method:
- The find() method returns the value of the first element in an array that pass a test (provided as a function).
- The find() method executes the function once for each element present in the array:
    + If it finds an array element where the function returns a true value, find() returns the value of that array element (and does not check the remaining values)
    + Otherwise it returns undefined
- Note: find() does not execute the function for empty arrays.
- Note: find() does not change the original array.
- array.find(function(currentValue, index, arr),thisValue)
    + function(currentValue, index, arr): Required. A function to be run for each element in the array.
    Function arguments:
        # currentValue:	Required. The value of the current element
        # index:	    Optional. The array index of the current element
        # arr: 	        Optional. The array object the current element belongs to
    + thisValue:    	Optional. A value to be passed to the function to be used as its "this" value.
        If this parameter is empty, the value "undefined" will be passed as its "this" value
    + Return Value:	Returns the array element value if any of the elements in the array pass the test, otherwise it returns undefined

* Sorting Method: 
- The sort() method sorts the items of an array.
- The sort order can be either alphabetic or numeric, and either ascending (up) or descending (down).
- By default, the sort() method sorts the values as strings in alphabetical and ascending order.
- This works well for strings ("Apple" comes before "Banana"). However, if numbers are sorted as strings, "25" is bigger than "100", because "2" is bigger than "1".
- Because of this, the sort() method will produce an incorrect result when sorting numbers.
- You can fix this by providing a "compare function" (See "Parameter Values" below).
- Note: This method changes the original array.
- array.sort(compareFunction)
    + compareFunction: Optional. A function that defines an alternative sort order. The function should return a negative, zero, or positive value, depending on the arguments, like:
        # function(a, b){return a-b}
    When the sort() method compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.
    + Return Value:	The Array object, with the items sorted

===============================================================================
Chapter 11: Dates & Times

* Dates & Times
- The Date object is used to work with dates and times.
- Date objects are created with new Date().
- There are four ways of instantiating a date:
    + let d = new Date();
    + let d = new Date(milliseconds);
    + let d = new Date(dateString);
    + let d = new Date(year, month, day, hours, minutes, seconds, milliseconds);
- Method: 
    getDate()	            Returns the day of the month (from 1-31)
    getDay()	            Returns the day of the week (from 0-6)
    getFullYear()	        Returns the year
    getHours()	            Returns the hour (from 0-23)
    getMilliseconds()	    Returns the milliseconds (from 0-999)
    getMinutes()	        Returns the minutes (from 0-59)
    getMonth()      	    Returns the month (from 0-11)
    getSeconds()	        Returns the seconds (from 0-59)
    getTime()	            Returns the number of milliseconds since midnight Jan 1 1970, and a specified date
    getTimezoneOffset()	    Returns the time difference between UTC time and local time, in minutes
    getUTCDate()	        Returns the day of the month, according to universal time (from 1-31)
    getUTCDay()	            Returns the day of the week, according to universal time (from 0-6)
    getUTCFullYear()	    Returns the year, according to universal time
    getUTCHours()	        Returns the hour, according to universal time (from 0-23)
    getUTCMilliseconds()	Returns the milliseconds, according to universal time (from 0-999)
    getUTCMinutes()	        Returns the minutes, according to universal time (from 0-59)
    getUTCMonth()	        Returns the month, according to universal time (from 0-11)
    getUTCSeconds()	        Returns the seconds, according to universal time (from 0-59)
    getYear()	            Deprecated. Use the getFullYear() method instead
    now()	                Returns the number of milliseconds since midnight Jan 1, 1970
    parse()	                Parses a date string and returns the number of milliseconds since January 1, 1970
    setDate()	            Sets the day of the month of a date object
    setFullYear()	        Sets the year of a date object
    setHours()	            Sets the hour of a date object
    setMilliseconds()	    Sets the milliseconds of a date object
    setMinutes()	        Set the minutes of a date object
    setMonth()	            Sets the month of a date object
    setSeconds()	        Sets the seconds of a date object
    setTime()	            Sets a date to a specified number of milliseconds after/before January 1, 1970
    setUTCDate()	        Sets the day of the month of a date object, according to universal time
    setUTCFullYear()	    Sets the year of a date object, according to universal time
    setUTCHours()	        Sets the hour of a date object, according to universal time
    setUTCMilliseconds()	Sets the milliseconds of a date object, according to universal time
    setUTCMinutes()	        Set the minutes of a date object, according to universal time
    setUTCMonth()	        Sets the month of a date object, according to universal time
    setUTCSeconds()	        Set the seconds of a date object, according to universal time
    setYear()	            Deprecated. Use the setFullYear() method instead
    toDateString()	        Converts the date portion of a Date object into a readable string
    toGMTString()	        Deprecated. Use the toUTCString() method instead
    toISOString()	        Returns the date as a string, using the ISO standard
    toJSON()	            Returns the date as a string, formatted as a JSON date
    toLocaleDateString()	Returns the date portion of a Date object as a string, using locale conventions
    toLocaleTimeString()	Returns the time portion of a Date object as a string, using locale conventions
    toLocaleString()	    Converts a Date object to a string, using locale conventions
    toString()	            Converts a Date object to a string
    toTimeString()	        Converts the time portion of a Date object to a string
    toUTCString()	        Converts a Date object to a string, according to universal time
    UTC()	                Returns the number of milliseconds in a date since midnight of January 1, 1970, according to UTC time
    valueOf()	            Returns the primitive value of a Date object

* Timestamps & Comparisons
-  Timestamps: 
    console.log('timestamp:', now.getTime());
- Convert timestamps into date objects
    const timestamp = 17434359485945;
    console.log(new Date(timestamp));

===============================================================================
Chapter 12: Async Javascript

* Asynchronous JavaScript
- Async JavaScript
    + Governs how we perform tasks which take some time to complete (e.g. Getting data from database)
    => start something now & finish later
- Synchronous Javascript
    + Javascript can run ONE statement at a time (single threaded)

* HTTP Requests
- Making HTTP Requests to get data from another server
- We make these requests to API endpoints

- The XMLHttpRequest.readyState property returns the state an XMLHttpRequest client is in. An XHR client exists in one of the following states:
    + UNSENT	        Client has been created. open() not called yet.
	+ OPENED	        open() has been called.
	+ HEADERS_RECEIVED	send() has been called, and headers and status are available.
	+ LOADING	D       ownloading; responseText holds partial data.
	+ DONE	            The operation is complete.

- UNSENT: The XMLHttpRequest client has been created, but the open() method hasn't been called yet.
- OPENED: open() method has been invoked. During this state, the request headers can be set using the          setRequestHeader() method and the send() method can be called which will initiate the fetch.
- HEADERS_RECEIVED: send() has been called and the response headers have been received.
- LOADING: Response's body is being received. If responseType is "text" or empty string, responseText will have the partial text response as it loads.
- DONE: The fetch operation is complete. This could mean that either the data transfer has been completed successfully or failed.

* JSON Data
- JSON.parse()
    + A common use of JSON is to exchange data to/from a web server.
    + When receiving data from a web server, the data is always a string.
    + Parse the data with JSON.parse(), and the data becomes a JavaScript object.

- When using the JSON.parse() on a JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object.

- Exceptions
    + Date objects are not allowed in JSON.
    + If you need to include a date, write it as a string.
    + Functions are not allowed in JSON.
    + If you need to include a function, write it as a string.

* Promise
- Promises are used to handle asynchronous operations in JavaScript. They are easy to manage when dealing with multiple asynchronous operations where callbacks can create callback hell leading to unmanageable code.
- Prior to promises events and callback functions were used but they had limited functionalities and created unmanageable code.
- Multiple callback functions would create callback hell that leads to unmanageable code.
- Events were not good at handling asynchronous operations.
- Promises are the ideal choice for handling asynchronous operations in the simplest manner. They can handle multiple asynchronous operations easily and provide better error handling than callbacks and events.

- Benefits of Promises
    + Improves Code Readability
    + Better handling of asynchronous operations
    + Better flow of control definition in asynchronous logic
    + Better Error Handling
- A Promise has four states:
    + fulfilled: Action related to the promise succeeded
    + rejected: Action related to the promise failed
    + pending: Promise is still pending i.e not fulfilled or rejected yet
    + settled: Promise has fulfilled or rejected
- A promise can be created using Promise constructor.
    + Syntax
        const promise = new Promise(function(resolve, reject){
        //do something
    });

    + Parameters
        # Promise constructor takes only one argument,a callback function.
        # Callback function takes two arguments, resolve and reject
        # Perform operations inside the callback function and if everything went well then call resolve.
        # If desired operations do not go well then call reject.

- Promise Consumers
Promises can be consumed by registering functions using .then and .catch methods.
    + then(): invoked when a promise is either resolved or rejected.
    Parameters: then() method takes two functions as parameters.
        # First function is executed if promise is resolved and a result is received.
        # Second function is executed if promise is rejected and an error is received. (It is optional and there is a better way to hanlde error using .catch() method
    Syntax:
        .then(function(result){
            //handle success
        }, function(error){
            //handle error
        })

    + catch(): invoked when a promise is either rejected or some error has occured in execution.
    Parameters: catch() method takes one function as parameter.
        # Function to handle errors or promise rejections.(.catch() method internally calls .then(null, errorHandler), i.e. .catch() is just a shorthand for .then(null, errorHandler))
    Syntax:
        .catch(function(error){
            //handle error
        })

* Fetch API
- The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.
- Ex:
    fetch('http://example.com/movies.json')
    .then(function(response) {
        return response.json();
    })
    .then(function(myJson) {
        console.log(JSON.stringify(myJson));
    });

* Async Function
- The async function declaration defines an asynchronous function, which returns an AsyncFunction object. An asynchronous function is a function which operates asynchronously via the event loop, using an implicit Promise to return its result. But the syntax and structure of your code using async functions is much more like using standard synchronous functions.
- You can also define async functions using an async function expression.
- Syntax: 
    async function name([param[, param[, ... param]]]) {
        statements
    }
    Parameter: 
    + name: The function name
    + param: The name of an argument to be passed to the function.
    + statements: The statements comprising the body of the function.

- An async function can contain an await expression that pauses the execution of the async function and waits for the passed Promise's resolution, and then resumes the async function's execution and evaluates as the resolved value.
- Remember, the await keyword is only valid inside async functions. If you use it outside of an async function's body, you will get a SyntaxError.
- Note that while the async function is paused, the calling function continues running (having received the implicit Promise returned by the async function).

===============================================================================
Chapter 14: Local Storage

* Local Storage
- Application Data
    + Set up a database to store & retrive data
    + Use local storage to store and retrive data

- Local Storage
    + The read-only localStorage property allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions. localStorage is similar to sessionStorage, except that while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the page session ends — that is, when the page is closed.
    + It should be noted that data stored in either localStorage or sessionStorage is specific to the protocol of the page.
    + The keys and the values are always strings (note that, as with objects, integer keys will be automatically converted to strings).

* Storing and Getting Data
- setTime()
    + The setItem() method sets the value of the specified Storage Object item.
    + The setItem() method belongs to the Storage Object, which can be either a localStorage object or a sessionStorrage object.
    + Syntax: 
        localStorage.setItem(keyname, value)


- getItem()
    + The getItem() method returns value of the specified Storage Object item.
    + The getItem() method belongs to the Storage Object, which can be either a localStorage object or a sessionStorrage object.
    + Syntax:
        localStorage.getItem(keyname)

* Deleting Storage Data
- removeItem()
    + The removeItem() method removes the specified Storage Object item.
    + The removeItem() method belongs to the Storage Object, which can be either a localStorage object or a sessionStorrage object.
    + Syntax:
        localStorage.removeItem(keyname)

- clear()
    + The clear() method removes all the Storage Object item for this domain.
    + The clear() method belongs to the Storage Object, which can be either a localStorage object or a sessionStorrage object.
    + Syntax:
        localStorage.clear()

* Stringifying & Parsing Data
- Stringify:
    + A common use of JSON is to exchange data to/from a web server.
    + When sending data to a web server, the data has to be a string.
    + Convert a JavaScript object into a string with JSON.stringify().

- Parse:
    + A common use of JSON is to exchange data to/from a web server.
    + When receiving data from a web server, the data is always a string.
    + Parse the data with JSON.parse(), and the data becomes a JavaScript object.

===============================================================================
Chapter 15: Object Oriented JavaScript
 
* Object Oriented JavaScript (OOP)
- In JavaScript, almost "everything" is an object.
- There are different ways to create new objects:
    + Define and create a single object, using an object literal.
    + Define and create a single object, with the keyword new.
    + Define an object constructor, and then create objects of the constructed type.

* Object Literal
- This is the easiest way to create a JavaScript Object.
- Using an object literal, you both define and create an object in one statement.
- An object literal is a list of name:value pairs (like age:50) inside curly braces {}.

* Class
- A Class is like a blueprint for an object (it describes how one should be made)
- Use the keyword class to create a class, and always add a constructor method.
- The constructor method is called each time the class object is initialized.
- Create an object based on the class:
    + Ex: mycar = new Car();
- the 'new' keyword:
    + 1 - it creates a new empty object {}
    + 2 - it binds the value of 'this' to the new empty object
    + 3 - it calls the constructor function to 'build' the object

* Method
- The constructor method is special, it is where you initialize properties, it is called automatically when a class is initiated, and it has to have the exact name "constructor", in fact, if you do not have a constructor method, JavaScript will add an invisible and empty constructor method.
- You are also free to make your own methods
- As you can see in the example above, you call the method by referring to the object's method name followed by parentheses (any parameters would go inside the parentheses).

* Subclasses
- To create a class inheritance, use the extends keyword.


